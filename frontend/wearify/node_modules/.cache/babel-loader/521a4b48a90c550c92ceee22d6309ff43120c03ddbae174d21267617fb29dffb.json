{"ast":null,"code":"import { getCSRFToken } from \"../context/auth\";\nexport const loadGuestShoppingBag = () => {\n  const guestShoppingBagEmpty = !sessionStorage.getItem(\"guestShoppingBag\");\n  if (guestShoppingBagEmpty) {\n    const emptyBag = {\n      items: [],\n      totalPrice: 0\n    };\n    sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify(emptyBag));\n    return emptyBag;\n  } else {\n    const guestShoppingBagData = JSON.parse(sessionStorage.getItem(\"guestShoppingBag\"));\n    return guestShoppingBagData;\n  }\n};\nexport const addItemToGuestBag = productId => {\n  const products = JSON.parse(sessionStorage.getItem(\"products\"));\n  const guestBag = loadGuestShoppingBag();\n  const productToBeAdded = products.find(product => product._id === productId);\n  const bagItem = guestBag.items.find(item => item.productData._id === productToBeAdded._id);\n  if (bagItem) {\n    bagItem.quantity = bagItem.quantity + 1;\n  } else {\n    guestBag.items.push({\n      productData: productToBeAdded,\n      quantity: 1\n    });\n  }\n  guestBag.totalPrice = guestBag.totalPrice + +productToBeAdded.price;\n  sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify(guestBag));\n};\nexport const removeItemFromGuestBag = productId => {\n  const products = JSON.parse(sessionStorage.getItem(\"products\"));\n  const guestBag = loadGuestShoppingBag();\n  const productToBeAdded = products.find(product => product._id === productId);\n  const bagItem = guestBag.items.find(item => item.productData._id === productToBeAdded._id);\n  if (bagItem.quantity > 1) {\n    bagItem.quantity = bagItem.quantity - 1;\n  } else {\n    guestBag.items = guestBag.items.filter(item => item.productData._id !== productToBeAdded._id);\n  }\n  guestBag.totalPrice = guestBag.totalPrice - +productToBeAdded.price;\n  sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify(guestBag));\n};\nexport const mergeGuestShoppingBag = async guestBagData => {\n  const csrfToken = await getCSRFToken();\n  const res = await fetch(\"http://localhost:5000/shoppingBag\", {\n    method: \"PUT\",\n    body: JSON.stringify({\n      guestBagData\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRF-Token\": csrfToken\n    },\n    credentials: \"include\"\n  });\n  const mergedBag = await res.json();\n  sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify({\n    items: [],\n    totalPrice: 0\n  }));\n  return mergedBag;\n};","map":{"version":3,"names":["getCSRFToken","loadGuestShoppingBag","guestShoppingBagEmpty","sessionStorage","getItem","emptyBag","items","totalPrice","setItem","JSON","stringify","guestShoppingBagData","parse","addItemToGuestBag","productId","products","guestBag","productToBeAdded","find","product","_id","bagItem","item","productData","quantity","push","price","removeItemFromGuestBag","filter","mergeGuestShoppingBag","guestBagData","csrfToken","res","fetch","method","body","headers","credentials","mergedBag","json"],"sources":["/Users/sthapliyal/Desktop/Wearify/frontend/wearify/src/guest/GuestBag.js"],"sourcesContent":["import { getCSRFToken } from \"../context/auth\";\n\nexport const loadGuestShoppingBag = () => {\n  const guestShoppingBagEmpty = !sessionStorage.getItem(\"guestShoppingBag\");\n\n  if (guestShoppingBagEmpty) {\n    const emptyBag = {\n      items: [],\n      totalPrice: 0,\n    };\n    sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify(emptyBag));\n    return emptyBag;\n  } else {\n    const guestShoppingBagData = JSON.parse(\n      sessionStorage.getItem(\"guestShoppingBag\")\n    );\n    return guestShoppingBagData;\n  }\n};\n\nexport const addItemToGuestBag = (productId) => {\n  const products = JSON.parse(sessionStorage.getItem(\"products\"));\n\n  const guestBag = loadGuestShoppingBag();\n\n  const productToBeAdded = products.find(\n    (product) => product._id === productId\n  );\n\n  const bagItem = guestBag.items.find(\n    (item) => item.productData._id === productToBeAdded._id\n  );\n\n  if (bagItem) {\n    bagItem.quantity = bagItem.quantity + 1;\n  } else {\n    guestBag.items.push({ productData: productToBeAdded, quantity: 1 });\n  }\n\n  guestBag.totalPrice = guestBag.totalPrice + +productToBeAdded.price;\n\n  sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify(guestBag));\n};\n\nexport const removeItemFromGuestBag = (productId) => {\n  const products = JSON.parse(sessionStorage.getItem(\"products\"));\n  const guestBag = loadGuestShoppingBag();\n\n  const productToBeAdded = products.find(\n    (product) => product._id === productId\n  );\n\n  const bagItem = guestBag.items.find(\n    (item) => item.productData._id === productToBeAdded._id\n  );\n\n  if (bagItem.quantity > 1) {\n    bagItem.quantity = bagItem.quantity - 1;\n  } else {\n    guestBag.items = guestBag.items.filter(\n      (item) => item.productData._id !== productToBeAdded._id\n    );\n  }\n\n  guestBag.totalPrice = guestBag.totalPrice - +productToBeAdded.price;\n\n  sessionStorage.setItem(\"guestShoppingBag\", JSON.stringify(guestBag));\n};\n\nexport const mergeGuestShoppingBag = async (guestBagData) => {\n  const csrfToken = await getCSRFToken();\n  const res = await fetch(\"http://localhost:5000/shoppingBag\", {\n    method: \"PUT\",\n    body: JSON.stringify({ guestBagData }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRF-Token\": csrfToken,\n    },\n    credentials: \"include\",\n  });\n  const mergedBag = await res.json();\n  sessionStorage.setItem(\n    \"guestShoppingBag\",\n    JSON.stringify({ items: [], totalPrice: 0 })\n  );\n  return mergedBag;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}